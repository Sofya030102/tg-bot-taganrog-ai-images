import re
import asyncio

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject, or_f, and_f
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state

from app.utils.mongodb import MongoDB
from app.utils.mongo_user import UserData
import app.utils.payments as payments

router = Router()

class WriteMail(StatesGroup):
    write_mail = State()

async def get_main_keyboard(user_data: UserData):
    kb = ReplyKeyboardBuilder()
    kb.button(text='üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')

    kb.button(text='üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç')
    #kb.button(text='üçø –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
    kb.button(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')

    kb.button(text='‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?')
    # kb.button(text="üìö –ê–Ω–∞–ª–∏–∑ PDF")

    # kb.button(text='üì° –ü–µ—Ä–µ–π—Ç–∏ –≤ Web-–≤–µ—Ä—Å–∏—é')
    kb.adjust(1, 2, 1) 

    return kb.as_markup(resize_keyboard=True)

###                        
### Start Command Callback  
###                         
@router.message(
    Command(commands={"start"}),
    F.chat.type == "private"
)
async def start_command_handler(
        message: Message, 
        command: CommandObject, 
        user_data: UserData
    ) -> None:
    user = message.from_user
    msg = """
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!</b> ü¶æ

üí°–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É! 
"""
    markup = await get_main_keyboard(user_data)
    await message.answer(msg, reply_markup=markup, parse_mode="html")
    await asyncio.sleep(2)

    msg = """
üçø <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å:</b>
 ~ –ù–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞ –≤ –∞–∫–≤–∞–ø–∞—Ä–∫–µ
 ~ –ù–∞—Ä–∏—Å—É–π –¥–æ–º
 ~ –ò–∑–æ–±—Ä–∞–∑–∏ —Å–Ω–µ–∂–Ω—ã–π –ø–µ–π–∑–∞–∂ 
"""
    await message.answer(msg, parse_mode="html")


###
### Start With GPT Callback
###
@router.message(
    F.text == "üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    F.chat.type == "private"
)
async def start_with_gpt_callback(message: Message, user_data: UserData) -> None:
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –∏ —è —ç—Ç–æ –Ω–∞—Ä–∏—Å—É—é! –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–æ—Ç–∏–∫–∞ üê±")

###
### How It's Work? FAQ Callback
###
@router.message(
    and_f(
        or_f(
            F.text == "‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
            Command(commands={"faq"}),
        ),
        F.chat.type == "private"
    )
)
async def how_its_work_callback(message: Message) -> None:
    user = message.from_user
    msg = """
‚ùì<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
StableDiffusion ‚Äî —ç—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –µ–µ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ: –æ—Ç –ø–µ–π–∑–∞–∂–µ–π –¥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤, –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω –¥–æ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

‚ùì<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ:</b>
- –û–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ. –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É, —Å—Ç–∏–ª—å –∏ –¥—Ä—É–≥–∏–µ –¥–µ—Ç–∞–ª–∏.
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ø—Ä–∏—Ä–æ–¥–∞¬ª, ¬´–ø–µ–π–∑–∞–∂¬ª, ¬´–ø–æ—Ä—Ç—Ä–µ—Ç¬ª, ¬´–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ¬ª.
- –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è. –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π¬ª, ¬´–∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏—Å—Ç—Å–∫–∏–π¬ª, ¬´—Å—é—Ä—Ä–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π¬ª.
- <i>–ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –≤—ã –æ–ø–∏—à–∏—Ç–µ, —Ç–µ–º –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç–µ.</i>
"""
    await message.answer(text=msg, parse_mode="HTML")

@router.callback_query(
    F.data == "upload_pdf",
    F.chat.type == "private"
)
async def upload_pdf_callback(query: CallbackQuery) -> None:
    await query.answer()


###
### Web Version Callback
###
@router.message(
    and_f(
        or_f(
            F.text == "üì° –ü–µ—Ä–µ–π—Ç–∏ –≤ Web-–≤–µ—Ä—Å–∏—é",
            Command(commands={"web"})
        ),
        F.chat.type == "private"
    )
)
async def switch_to_web_callback(message: Message, user_data: UserData) -> None:
    msg = """
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ Web-–≤–µ—Ä—Å–∏—é ‚§µÔ∏è
"""
    kb = InlineKeyboardBuilder()
    kb.button(text="üì° –ü–µ—Ä–µ–π—Ç–∏ –≤ Web-–≤–µ—Ä—Å–∏—é", url="https://www.studgpt.ru/")
    await message.answer(msg, reply_markup=kb.as_markup(), parse_mode="HTML")

###
### Profile Callback
###
@router.message(
    and_f(
        or_f(
            F.text == "üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç",
            Command(commands={"profile"})
        ),
        F.chat.type == "private"
    )
)
async def my_profile_callback(message: Message, user_data: UserData) -> None:
    sub = await MongoDB.get_subscription_by_name(user_data.subscription.name)
    quota = sub.get('quota', 0)
    remains = user_data.subscription.quota
    msg = f"""
<b>üë®‚Äçüíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,</b> {message.from_user.full_name}
‚îú –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º: <code>{message.from_user.username}</code>
‚îú –í–∞—à ID: <code>{message.from_user.id}</code>
‚îú –í–∞—à email: <code>{user_data.email}</code>
‚îî –Ø–∑—ã–∫ –±–æ—Ç–∞: <code>'RU'</code>

üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {user_data.subscription.name}
‚îú <code>{quota}</code> –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
‚îî –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è <code>{remains}</code> –∑–∞–ø—Ä–æ—Å–æ–≤

<i>* –ó–∞–ø—Ä–æ—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ 00:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.</i>
"""
    
    kb = InlineKeyboardBuilder()
    #kb.button(text="‚ú® –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="switch_to_subscriptions")
    await message.answer(msg, reply_markup=kb.as_markup(), parse_mode="HTML")

###
### Subscriptions Callback
###
@router.message(
    and_f(
        or_f(
            F.text == "üçø –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            Command(commands={"subscriptions"})
        ),
        F.chat.type == "private"
    )
)
@router.callback_query(
    F.data == "switch_to_subscriptions"
)
async def buy_subscription_callback(message: Message, user_data: UserData) -> None:
    msg = """
<b>üîç–¢–∞—Ä–∏—Ñ –°–¢–ê–†–¢</b>
‚îú <code>100</code> –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
‚îú –î–æ—Å—Ç—É–ø –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ChatGPT
‚îú –ü–µ—Ä–µ–¥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
‚îú –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–æ—Ç–æ 
‚îî –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

<b>üíé –¢–∞—Ä–∏—Ñ –ü–†–û–î–í–ò–ù–£–¢–´–ô</b> 
‚îú <code>500</code> –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
‚îú –î–æ—Å—Ç—É–ø –∫ GPT-4
‚îú –ü–µ—Ä–µ–¥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
‚îú –ê–Ω–∞–ª–∏–∑ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚îú –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–æ—Ç–æ 
‚îú –î–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º beta-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º
‚îî –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
"""
    kb = InlineKeyboardBuilder()
    kb.button(text="–°—Ç–∞—Ä—Ç - 199 —Ä—É–±./–º–µ—Å—è—Ü", callback_data="buy_start_subscription" if user_data.subscription.name == "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è" else "already_subscribed")
    kb.button(text="üíé –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π - 499 —Ä—É–±./–º–µ—Å—è—Ü", callback_data="buy_pro_subscription" if user_data.subscription.name in ['–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è', '–°—Ç–∞—Ä—Ç'] else "already_subscribed")
    kb.adjust(1, 1)
    if type(message) == CallbackQuery:
        await message.message.edit_text(msg, reply_markup=kb.as_markup(), parse_mode="HTML")
    else:
        await message.answer(text=msg, parse_mode="HTML", reply_markup=kb.as_markup())

@router.callback_query(
    F.data == "already_subscribed"
)
async def already_subscribed_callback(query: CallbackQuery, user_data: UserData) -> None:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="switch_to_subscriptions")
    await query.message.edit_text("üòÖ –í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ —Ä–∞–≤–Ω—É—é –∏–ª–∏ –ª—É—á—à—É—é –ø–æ–¥–ø–∏—Å–∫—É!", reply_markup=kb.as_markup(), parse_mode="HTML")


###
### Buy Subscription Callback
###
@router.callback_query(
    or_f(
        F.data == "buy_start_subscription",
        F.data == "buy_pro_subscription"
    )
)
async def buy_subscription_callback(query: CallbackQuery, user_data: UserData, state: FSMContext) -> None:
    await query.answer()
    if (user_data.email == "" or user_data.email is None):
        await state.set_state(WriteMail.write_mail)
        kb = InlineKeyboardBuilder()
        kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_states")
        await query.message.edit_text("<b>üë®‚Äçüíª –ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã ‚§µÔ∏è</b>\n–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=kb.as_markup(), parse_mode="HTML")
        return
    if query.data == "buy_start_subscription":
        sub = await MongoDB.get_subscription_by_name("–°—Ç–∞—Ä—Ç")
    elif query.data == "buy_pro_subscription":
        sub = await MongoDB.get_subscription_by_name("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")
    
    msg = f"""
<b>üí≥ –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ {sub.get('name')}</b>
–î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–∞—Ä—ã –º–∏–Ω—É—Ç.

üìö–ü–µ—Ä–µ—Ö–æ–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href="https://www.studgpt.ru/terms">—É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a>.

–¢–∞—Ä–∏—Ñ—ã –ø—Ä–æ–¥–ª—è—é—Ç—Å—è –Ω–∞ –º–µ—Å—è—Ü –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.

<i>–ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –≤—ã —Ç–∞–∫ –∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ç–∞—Ä–∏—Ñ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>
"""
    # If user already have payment
    payment = await MongoDB.db.payments.find_one({"user_id": query.from_user.id, "status": "pending", "product": sub.get('name')})
    if payment is not None:
        y_payment = await payments.YookassaApi.get_payment(payment.get('payment_id'))
        print(y_payment)
        if y_payment.status == payments.PaymentStatus.CANCELED:
            await MongoDB.update_payment(y_payment.id, 'canceled')
        else:
            kb = InlineKeyboardBuilder()
            kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=f"https://yoomoney.ru/checkout/payments/v2/contract?orderId={payment.get('payment_id')}")
            await query.message.answer(msg, reply_markup=kb.as_markup())
            return
    # Create new payment
    payment = await payments.create_subscription_payment(query.from_user.id, sub['_id'], user_data.email)
    kb = InlineKeyboardBuilder()
    kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment.url)
    await query.message.answer(msg, reply_markup=kb.as_markup())

###
### Write mail Callback
###
@router.callback_query(
    F.data == "write_mail",
    StateFilter(default_state)
)
async def write_mail_callback(query: CallbackQuery, user_data: UserData, state: FSMContext) -> None:
    await query.answer()
    await state.set_state(WriteMail.write_mail)
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_states")
    await query.message.edit_text("<b>üë®‚Äçüíª –ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:</b>", reply_markup=kb.as_markup(), parse_mode="HTML")

###
### Cancel states Callback
###
@router.callback_query(
    F.data == "cancel_states"
)
async def cancel_states_callback(query: CallbackQuery, state: FSMContext) -> None:
    await query.answer()
    await state.clear()
    await query.message.delete()

###
### Write mail handler
###
@router.message(
    StateFilter(WriteMail.write_mail),
    F.chat.type == "private"
)
async def write_mail_handler(message: Message, user_data: UserData, state: FSMContext) -> None:
    if not re.match(r"[^@]+@[^@]+\.[^@]+", message.text):
        kb = InlineKeyboardBuilder()
        kb.button(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="write_mail")
        await message.answer("<b>‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã!</b>", reply_markup=kb.as_markup())
        await state.clear()
        return
    await user_data.set_mail(message.text)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ú® –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", callback_data="switch_to_subscriptions")
    await message.answer("<b>‚úÖ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>", reply_markup=kb.as_markup(), parse_mode="HTML")
    await state.clear()

###
### Settings Callback
###
@router.message(
    and_f(
        or_f(
            F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            Command(commands={"settings"})
        ),
        F.chat.type == "private"
    )
)
@router.callback_query(
    F.data == "switch_to_settings"
)
async def settings_callback(message: Message, user_data: UserData) -> None:
#     kb = InlineKeyboardBuilder()
#     kb.button(text="üìï –î–æ–∫—É–º–µ–Ω—Ç—ã PDF", callback_data="settings_select_pdf")
#     kb.button(text="üë®‚Äçüíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞", callback_data="settings_text_generation")
#     kb.button(text="üåÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="settings_image_generation")
#     kb.adjust(1, 1, 1)

#     msg = """
# ‚ö°Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>

# - <b>–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.</b> –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.

# - <b>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–æ—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.</b> –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç—É –ª—é–±—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏.

# <i>–ß–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –≤–∞—à–µ–º —Ç–∞—Ä–∏—Ñ–µ, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Ç–∞—Ä–∏—Ñ /subscriptions.</i>
# """
#     if type(message) == CallbackQuery:
#         await message.message.edit_text(msg, reply_markup=kb.as_markup(), parse_mode="HTML")
#     else:
#         await message.answer(msg, reply_markup=kb.as_markup(), parse_mode="HTML")
    msg = f"""
<b>‚ö°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å</b> 

üî• <b>StableDiffusion</b> {"‚úîÔ∏è" if user_data.settings.text_model == 'imagine' else ''}
‚îú –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚îî –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ

–ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ—è–≤—è—Ç—Å—è —Å–∫–æ—Ä–æ!
"""
    kb = InlineKeyboardBuilder()
    kb.button(text="StableDiffusion", callback_data="set_langmodel_imagine")
    #kb.button(text="GPT 3.5 Turbo", callback_data="set_langmodel_gpt-3.5-turbo")
    #kb.button(text="GPT 4", callback_data="set_langmodel_gpt4", )
    # kb.button(text="–ù–∞–∑–∞–¥", callback_data="switch_to_settings")
    kb.adjust(1, 1)
    await message.answer(msg, reply_markup=kb.as_markup(), parse_mode="HTML")


###
### Settings Text Generation Callback
###
@router.callback_query(
    or_f(
        F.data == "settings_text_generation",
        F.data.startswith("set_langmodel_")
    )
)
async def settings_text_generation_callback(query: CallbackQuery, user_data: UserData) -> None:
    await query.answer()

    if query.data.startswith("set_langmodel_"):
        model = query.data.split("_")[-1]
        if model == 'gpt4':
            await query.answer("–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ...")
            return
        if model == user_data.settings.text_model:
            return
        await user_data.settings.set_text_model(model)
        
    msg = f"""
<b>‚ö°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å</b> 

üî• <b>Gemini</b> {"‚úîÔ∏è" if user_data.settings.text_model == 'gemini' else ''}
‚îú –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Google
‚îî –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

ü•∂ <b>ChatGPT 3.5 Turbo</b> {"‚úîÔ∏è" if user_data.settings.text_model == 'gpt-3.5-turbo' else ''}
‚îú –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –º–æ–¥–µ–ª—å
‚îî –†–µ—à–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏

ü•∂ <b>ChatGPT 4</b> {"‚úîÔ∏è" if user_data.settings.text_model == 'gpt4' else ''} (<i>–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</i>)
‚îú –°–∞–º–∞—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
‚îî –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
    kb = InlineKeyboardBuilder()
    kb.button(text="Gemini", callback_data="set_langmodel_gemini")
    kb.button(text="GPT 3.5 Turbo", callback_data="set_langmodel_gpt-3.5-turbo")
    kb.button(text="GPT 4", callback_data="set_langmodel_gpt4", )
    # kb.button(text="–ù–∞–∑–∞–¥", callback_data="switch_to_settings")
    kb.adjust(3, 1)
    await query.message.edit_text(msg, reply_markup=kb.as_markup(), parse_mode="HTML")

###
### Settings Image Generation Callback
###
@router.callback_query(
    F.data == "settings_image_generation"
)
async def settings_image_generation_callback(query: CallbackQuery, user_data: UserData) -> None:
    await query.answer()
    await query.message.answer("üõ† –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")