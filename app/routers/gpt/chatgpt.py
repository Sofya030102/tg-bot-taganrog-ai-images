from aiogram import F, Router
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums.chat_member_status import ChatMemberStatus

from app.settings import SETTINGS
from app.filters import UserSettingsFilter

from app.utils.mongo_user import UserData
from app.utils.openai import *

router = Router()

@router.message(
    UserSettingsFilter(
        stream_mode = False,
        text_model='gpt-3.5-turbo'
    ),
    F.chat.type == "private"
)
async def gpt_message_handler(message: Message, user_data: UserData) -> None:
    # Only if user is chat member
    user = message.from_user
    member = await message.bot.get_chat_member(-1002076481867, user.id)
    if member is None or member.status in [ChatMemberStatus.KICKED, ChatMemberStatus.LEFT, ChatMemberStatus.RESTRICTED]:
        msg = """
üí¨–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª @studgpt, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º.   

<i>P.S. –¢–∞–º –º—ã —Å–µ–π—á–∞—Å —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ Telegram Premium ‚≠êÔ∏è</i>
"""     
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ú® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/studgpt")
        await message.answer(msg, reply_markup=kb.as_markup(), parse_mode="HTML")
        return
    # If user has quota
    if not user_data.subscription.has_quota():
        msg = f"""
<b>üò¢ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.</b>
–ü—Ä–∏–æ–±—Ä–∏—Ç–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
"""
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ú® –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="switch_to_subscriptions")
        await message.answer(msg, parse_mode="HTML", reply_markup=kb.as_markup())
        return
    # If user send photo
    if message.photo:
        if user_data.settings.text_model != 'gpt4':
            kb = InlineKeyboardBuilder()
            kb.button(text="–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="settings_text_generation")
            await message.answer('–ú–æ–¥–µ–ª—å ChatGPT-3.5 Turbo –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!', reply_markup=kb.as_markup())
            return
        await message.answer("üõ† –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π GPT4 –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
        return
    # Starting generating response
    msg = await message.reply("‚è≥ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    # If user send text
    ok = await put_chat_completion(
        user_data=user_data, 
        prompt=message.text, 
        answer_message=msg,
        replied_message_id=message.reply_to_message.message_id if message.reply_to_message else None
    )
    if not ok: 
        await msg.edit_text("‚ùóÔ∏è<b>–ú—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å</b>", parse_mode="HTML")
        await asyncio.sleep(5)
        await msg.delete()